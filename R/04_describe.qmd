## Load libraries

```{r}
#| message: false
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
```

## Set project path

```{r}
project_path <- "~/projects/group_11_project/"
```

## Loading the data:

```{r}
data <- read_tsv(str_c(project_path, "data/03_dat_aug.tsv"))
```

## Inspect the dataset:

```{r}
data
```

The final dataframe contains 62 observations(rows) and 1946 variables(columns). Each observation is a colorectal cancer sample. Of the 1946 variables, 1 is the sample ID, 10 are the sample metadata, and the remaining 1935 variables are different genes whose expression is measured.

The variables Age and Age_group contain the same information, just in a different format. The same goes for Dukes_stage and No_stage.

The variables DFS and DFS event both give information on Disease-Free Survival. DFS describes the length of time without the disease returning, and DFS event describes whether or not the disease returned.

```{r}
data |>
  count(DFS_event)
```

Out of the 62 patients, 25 showed disease free survival, while 37 showed a return of the disease.

## Describe the dataset

Age and DFS 'Simple statistics

The relationship between age and DFS

```{r}
# Define a vector of numeric feature names
features_num <- c("Age", "DFS")
# Select numeric columns based on features_num
numeric_data <- data[ , features_num, drop = FALSE]

# Compute summary statistics for each numeric feature
summary_stats <- numeric_data |>
  summarise(across(everything(), list(
    min = min,
    max = max,
    mean = mean,
    sd = sd
  ), na.rm = TRUE))

#Format the summary statistics into a table
summary_table_long <- summary_stats %>%
  pivot_longer(
    cols = everything(),
    names_to = c("Feature", "Statistic"),
    names_sep = "_",
    values_to = "Value"
  ) %>%
  arrange(Feature, Statistic)

#Transform back to wide format
summary_table_wide <- summary_table_long %>%
  pivot_wider(
    names_from = Statistic,
    values_from = Value
  )

# Print the wide table
print(summary_table_wide)
```

```{r}
# Select patient 
patient_data <- data[ 1:9]
patient_data <- patient_data|>
    mutate(Gender = case_when(Gender == 0 ~ "Male",
                            Gender ==  1 ~ "Female"))
patient_data
```

## Visualizing data

```{r}
# Check for NA values in the Gender column
sum(is.na(data$Gender))
```

```{r}
pl3 <- data |>
  ggplot(aes(x = factor(Gender), fill = factor(Gender))) + 
  geom_bar(stat = "count") +
  labs(
    title = "Gender Distribution", 
    x = "Gender", 
    y = "Count", 
    fill = "Gender"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1), 
    axis.title.x = element_text(size = 14, face = "bold"),  # Modify x-axis title font size and make it bold
    axis.title.y = element_text(size = 14, face = "italic") # Modify y-axis title font size and make it italic
  ) +
  scale_x_discrete(labels = c("0" = "Male", "1" = "Female")) + 
  scale_fill_discrete(labels = c("0" = "Male", "1" = "Female")) +
  theme_classic()
pl3
```

```{r}
pl<- data |>
  drop_na(Gender, Age_group)|>
  mutate(Gender = case_when(
    Gender == 0 ~ "Male",
    Gender == 1 ~ "Female"
  ))|>
  count(Gender, Age_group)|>
 ggplot(aes(x = Age_group,
             y = n,
             fill = Gender)) +
  labs(
    title = "The Gender Distribution Across Age Groups Chart", 
    x = "Gender", 
    y = "Count", 
    fill = "Gender"
  )+
  geom_col(position = position_dodge(
    preserve = "single"),
    colour = "black",
    alpha = 0.5) +
  geom_hline(yintercept = 0) +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
       axis.text.x = element_text(angle = 45, hjust = 1), 
       axis.title.x = element_text(size = 10, face = "bold"),  # Modify x-axis title font size and make it bold
      axis.title.y = element_text(size = 10, face = "bold") # Modify y-axis title font size and make it italic
    )

pl |> 
  ggsave(filename = "04_gender_age_group_distribution.png",
         path = str_c(project_path, "results/"))

pl
```

```{r}
pl1 <- data|>
  ggplot(aes(x = Dukes_stage, fill = Dukes_stage)) +
    geom_bar(stat = "count") +                       # Bar plot
    labs(title = "Dukes_Stage Distribution", x = "Dukes_stage", y = "Count") + # Labels
    theme_minimal() +                   # Clean theme
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1) # Rotate x labels for better readability
    ) +
    theme_classic()# Print each plot


pl1
```

```{r}
pl2<- data|>
  ggplot(aes(x = Location,fill = Location)) +
    geom_bar(stat = "count") +                       # Bar plot
    labs(title = "Location Distribution", x = "Location", y = "Count") + # Labels
    theme_minimal() +                   # Clean theme
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1) # Rotate x labels for better readability
    ) 
pl2
```

```{r}
ggplot(data, aes(x = Age, y = DFS)) +
  geom_point() +               # Scatter plot
  labs(
    title = "DFS vs Age",       # Plot title
    x = "Age",                  # X-axis label
    y = "DFS (months)"          # Y-axis label
  ) +
  theme_minimal() +             # Clean theme
  theme(
    panel.grid.major = element_line(color = "grey", size = 0.5),  # Grid lines
    panel.grid.minor = element_line(color = "grey", size = 0.25)
  )
```
