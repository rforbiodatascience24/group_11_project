---
title: "Gene Expression Analysis of Colorectal Cancer Samples"
author: "Group 11: Eleni-Sofia Tseperi (s240066),	Johanne Lund	(s233246), Marie Picquet	(s233736), Eglantine Anton	(s233242), Qiuyan Wu	(s241063)"
format:
  revealjs:
    code-line-numbers: true
    scrollable: true
    smaller: true
    scoll: true
    theme: simple
    transition: slide
    incremental: true 
editor: visual
---

## Introduction

-   Background:

    -   Colorectal cancer (CRC) is a major cause of cancer mortality

    -   Gene expression analysis can help identify dysregulated genes

-   Goal of the project:

    -   Investigate if the gene expression data can be used to build predictive models for CRC diagnosis

-   Dataset:

    -   62 colorectal cancer samples

        -   Gene expression level for 1935 genes

        -   Patient metadata on 8 variables

## Methods

-   The run-all file 00_all.qmd is used to run the entire project

![](images/Overview_img.png)

-   Data is loaded from Kaggle into the folder /data/\_raw

    -   1 Gene Expression Data File and 1 Patient Metadata File

        -   variables...

    -   Artificially made dirty and messy to increase the difficulty of the projects

## Methods

::: columns
::: {.column width="50%" style="font-size: 22px"}
### Tidy

-   Expression data

    -   The columns represent observations and the rows variables -\> Pivot the data set

-   Patient data

    -   Separate `DFS event/Adj_Radio/Adj_Chem` into 3 distinct variables

    -   Convert `DFS (in years and months)` into months to have only value per observation

-   Combine the two data sets by joining on the patient ID
:::

::: {.column width="50%" style="font-size: 22px"}
### Clean

-   Cleaning row value

    -   Handle Missing Values ("NA" and "N/A")

    -   Standardize Gender Labels

    -   Fix Invalid Age Value

    -   Remove empty row

-   Cleaning column names

    -   Make the name shorter (remove units, spaces...)

### Augment

-   Create `age_group`, `metastasis` and `DFS_label` variable
:::
:::

## Data Description

::: columns
::: {.column width="50%"}
-   Data Exploration:

    -   Statistics for the numerical data:

-   

    -   Visualization of the categorical data:
:::

::: {.column width="50%"}
![](images/table04.png)

![](images/04_gender_distribution.png){width="1523" height="128"}

![](images/04_gender_age_group_distribution-01.png){width="758" height="45"}

![](images/04_dukes_stage_distribution-02.png){width="288" height="59"}

![](images/04_DFS_age_distribution-01.png){width="563" height="42"}
:::
:::

::: columns
::: {.column width="50%"}
## Analysis

1.  Principal Component Analysis
2.  Gene regulation and metastasis analysis
3.  Disease-Free Survival in relation to Tumor Location

### PCA

-   Calculation of the different Principal components

-   Visualization the data in a 2D scatter plot

-   Searching for tendencies, and potential clustering of the data.
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "5-18|20-25|27-41"

# Load data
data <- read_tsv("../data/03_dat_aug.tsv")

# Handle missing data (if any)
cleaned_data <- data |>
select(where(is.numeric))|> 
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))

# Perform PCA
pca <- prcomp(cleaned_data, scale = TRUE)

#Augment PCA
pca_aug <- pca |>
augment(data)

# precentage of variance:
pca_plot_axes_labels <- pca |>
  tidy("eigenvalues") |>
  mutate(lbl = str_c("PC", PC, ": VE = ", round(percent*100,2), "%")) |> 
  pull("lbl")

#Scree plot generating 
scree_plot<- pca |>
  tidy("pcs") |> 
  mutate(percent = percent * 100) |> 
  ggplot(aes(x = PC,
         y = percent)) +
  geom_hline(yintercept = 0) +
  geom_col(colour = "black",
       alpha = 0.5) +
  theme_bw(base_size = 20) +
  theme(panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank()) +
  labs(title = "Scree Plot of PCA of Data",
   y = "Percent %")

#code plot
pca_plot <- pca_aug |> 
  ggplot(aes(x = .fittedPC1,
         y = .fittedPC2,
         colour = Location,)) +
  geom_point() +  # Scatter plot
  geom_smooth(method = "lm") +
  geom_point() +
  coord_fixed() +
  labs(title = "PCA: Scores Plot of Colorectal Cancer",
   x = pluck(pca_plot_axes_labels, 1),
   y = pluck(pca_plot_axes_labels, 2),
   colour = "Location") +
  theme_minimal()
```
:::
:::

## Principal Component Analysis

::: columns
::: {.column width="50%"}
![](../results/05_pca_scree_plot.png){width="530" height="306"}

![](../results/05_pca_gender.png){width="537" height="320"}
:::

::: {.column width="50%"}
![](../results/05_pca_Dukes_stages.png)

![](../results/05_pca_location.png){width="520" height="275"}
:::
:::

## Gene regulation and metastasis analysis

### Aim

Identify genes that are significantly up- or down-regulated between the patients with/without metastasis

::: columns
::: {.column width="40%" style="font-size: 22px"}
1.  Pivot the data
2.  Group per gene and nest the data
3.  Fit a linear model per gene
4.  Tidy the fitted model and get confidence intervals
5.  Extract the model parameters and correct for multiple testing
:::

::: {.column width="60%" style="font-size: 22px"}
```{r}
#| echo: true
#| eval: false
data_long_nested <- data |>
  select(ends_with("_at"), metastasis) |> 
  pivot_longer(cols = ends_with("_at"), 
               names_to = "gene", 
               values_to = "log2_expr_level") |> 
  group_by(gene) |> 
  nest() |> 
  ungroup()

data_long_nested <- data_long_nested |> 
  group_by(gene) |> 
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = log2_expr_level ~ metastasis,
                            data = .x))) |> 
  ungroup() |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~tidy(x =.x,
                                            conf.int = TRUE,
                                            conf.level = 0.95)))

estimates <- data_long_nested |> 
  unnest(model_object_tidy) |> 
  filter(term == "metastasis") |> 
  select("gene", "p.value", "estimate", "conf.low", "conf.high") |> 
  mutate(q.value = p.adjust(p.value),
         is_significant = case_when(q.value > 0.05 ~ "no",
                                    q.value <= 0.05 ~ "yes"))

```
:::
:::

## Gene regulation and metastasis analysis

-   No gene found to be significant after multiple testing

-   Use the genes with p\<0.01 for the plot

-   20 genes (12 up regulated, 8 down regulated)

![](../results/06_analysis_volcano.png)

## Analysis of Disease-Free Survival in relation to Tumor Location

::: columns
::: {.column width="50%" style="font-size: 22px"}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2|3|4"
dfs_loc_plot <- data |>
  group_by(DFS_label) |>
  count(Location) |>
  ggplot(mapping = aes(x = Location, y = n, fill=DFS_label)) +
  geom_col(position = "dodge", alpha=0.5, color="black") +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 10, vjust = 1, hjust=1),
    panel.grid.major.x = element_blank(),  # Remove major vertical grid lines for a cleaner graph
    panel.grid.minor.x = element_blank()   # Remove minor vertical grid lines for a cleaner graph
  ) +
  scale_y_continuous(breaks = seq(0, 20, by=2)) + # Show more ticks on the y axis to make the graph easier to read
  labs(
    title = "Distribution of Disease-Free Survival Events by Sample Location",
    subtitle = "Analysis of colorectal cancer samples",
    x = "Location of sample",
    y = "Number of samples",
    fill = NULL,
    caption = "Data: https://www.kaggle.com/datasets/amandam1/colorectal-cancer-patients/data"
  )
```
:::

::: {.column width="50%" style="font-size: 22px"}
![](../results/07_analysis_3.png)
:::
:::

## Conclusion:

-   No clear clustering

-   No significantly expressed genes

-   Tumor located in the rectum shown to be more aggressive
